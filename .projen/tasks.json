{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "bundle": {
      "name": "bundle",
      "description": "Prepare assets",
      "steps": [
        {
          "spawn": "bundle:livelink.lambda"
        }
      ]
    },
    "bundle:livelink.lambda": {
      "name": "bundle:livelink.lambda",
      "description": "Create a JavaScript bundle from src/livelink.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/livelink.lambda.ts --target=\"node16\" --platform=\"node\" --outfile=\"assets/livelink.lambda/index.js\" --external:aws-sdk"
        }
      ]
    },
    "bundle:livelink.lambda:watch": {
      "name": "bundle:livelink.lambda:watch",
      "description": "Continuously update the JavaScript bundle from src/livelink.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/livelink.lambda.ts --target=\"node16\" --platform=\"node\" --outfile=\"assets/livelink.lambda/index.js\" --external:aws-sdk --watch"
        }
      ]
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compat": {
      "name": "compat",
      "description": "Perform API compatibility check against latest version",
      "steps": [
        {
          "exec": "jsii-diff npm:$(node -p \"require('./package.json').name\") -k --ignore-file .compatignore || (echo \"\nUNEXPECTED BREAKING CHANGES: add keys such as 'removed:constructs.Node.of' to .compatignore to skip.\n\" && exit 1)"
        }
      ]
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "exec": "jsii --silence-warnings=reserved-word"
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "ts-node --project tsconfig.dev.json .projenrc.ts"
        }
      ]
    },
    "docgen": {
      "name": "docgen",
      "description": "Generate API.md from .jsii manifest",
      "steps": [
        {
          "exec": "jsii-docgen -o API.md"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src test build-tools projenrc .projenrc.ts"
        }
      ]
    },
    "integ:livelink:assert": {
      "name": "integ:livelink:assert",
      "description": "assert the snapshot of integration test 'livelink'",
      "steps": [
        {
          "exec": "[ -d \"test/livelink.integ.snapshot\" ] || (echo \"No snapshot available for integration test 'livelink'. Run 'projen integ:livelink:deploy' to capture.\" && exit 1)"
        },
        {
          "exec": "cdk synth --app \"ts-node -P tsconfig.dev.json test/livelink.integ.ts\" --no-version-reporting --no-asset-metadata --no-path-metadata -o test/.tmp/livelink.integ/assert.cdk.out > /dev/null"
        },
        {
          "exec": "diff -r -x asset.* -x cdk.out -x manifest.json -x tree.json test/livelink.integ.snapshot/ test/.tmp/livelink.integ/assert.cdk.out/"
        }
      ]
    },
    "integ:livelink:deploy": {
      "name": "integ:livelink:deploy",
      "description": "deploy integration test 'livelink' and capture snapshot",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "rm -fr test/.tmp/livelink.integ/deploy.cdk.out"
        },
        {
          "exec": "cdk deploy --app \"ts-node -P tsconfig.dev.json test/livelink.integ.ts\" --no-version-reporting --no-asset-metadata --no-path-metadata '**' --require-approval=never -o test/.tmp/livelink.integ/deploy.cdk.out"
        },
        {
          "exec": "rm -fr test/livelink.integ.snapshot"
        },
        {
          "exec": "mv test/.tmp/livelink.integ/deploy.cdk.out test/livelink.integ.snapshot"
        },
        {
          "spawn": "integ:livelink:destroy"
        }
      ]
    },
    "integ:livelink:destroy": {
      "name": "integ:livelink:destroy",
      "description": "destroy integration test 'livelink'",
      "steps": [
        {
          "exec": "cdk destroy --app test/livelink.integ.snapshot '**' --no-version-reporting"
        }
      ]
    },
    "integ:livelink:snapshot": {
      "name": "integ:livelink:snapshot",
      "description": "update snapshot for integration test \"livelink\"",
      "steps": [
        {
          "exec": "cdk synth --app \"ts-node -P tsconfig.dev.json test/livelink.integ.ts\" --no-version-reporting --no-asset-metadata --no-path-metadata -o test/livelink.integ.snapshot > /dev/null"
        }
      ]
    },
    "integ:livelink:watch": {
      "name": "integ:livelink:watch",
      "description": "watch integration test 'livelink' (without updating snapshots)",
      "steps": [
        {
          "exec": "cdk watch --app \"ts-node -P tsconfig.dev.json test/livelink.integ.ts\" --no-version-reporting --no-asset-metadata --no-path-metadata '**' -o test/.tmp/livelink.integ/deploy.cdk.out"
        }
      ]
    },
    "integ:snapshot-all": {
      "name": "integ:snapshot-all",
      "description": "update snapshot for all integration tests",
      "steps": [
        {
          "spawn": "integ:livelink:snapshot"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "exec": "if [ ! -z ${CI} ]; then rsync -a . .repo --exclude .git --exclude node_modules && rm -rf dist && mv .repo dist; else npx projen package-all; fi"
        }
      ]
    },
    "package-all": {
      "name": "package-all",
      "description": "Packages artifacts for all target languages",
      "steps": [
        {
          "spawn": "package:js"
        }
      ]
    },
    "package:js": {
      "name": "package:js",
      "description": "Create js language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target js"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation",
      "steps": [
        {
          "spawn": "docgen"
        }
      ]
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation",
      "steps": [
        {
          "spawn": "bundle"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot"
        },
        {
          "spawn": "eslint"
        },
        {
          "spawn": "integ:livelink:assert"
        }
      ]
    },
    "test:update": {
      "name": "test:update",
      "description": "Update jest snapshots",
      "steps": [
        {
          "exec": "jest --updateSnapshot"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "yarn upgrade npm-check-updates"
        },
        {
          "exec": "npm-check-updates --dep dev --upgrade --target=minor"
        },
        {
          "exec": "npm-check-updates --dep optional --upgrade --target=minor"
        },
        {
          "exec": "npm-check-updates --dep peer --upgrade --target=minor"
        },
        {
          "exec": "npm-check-updates --dep prod --upgrade --target=minor"
        },
        {
          "exec": "npm-check-updates --dep bundle --upgrade --target=minor"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "jsii -w --silence-warnings=reserved-word"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node -e \\\"console.log(process.env.PATH)\\\"\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\"."
}
